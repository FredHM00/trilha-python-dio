from abc import ABC, abstractclassmethod, abstractproperty
from datetime import datetime

class Cliente:
    def __init__(self, endereco):
        self.endereco = endereco
        self.contas = []

    def realizar_transacao(self, conta, transacao):
        transacao.registrar(conta)

    def adicionar_conta(self, conta):
        self.contas.append(conta)

class PessoaFisica(Cliente):
    def __init__(self, nome, data_nascimento, cpf, endereco):
        super().__init__(endereco)
        self.nome = nome
        self.data_nascimento = data_nascimento
        self.cpf = cpf

class Historico:
    def __init__(self):
        self._transacoes = []

    @property
    def transacoes(self):
        return self._transacoes

    def adicionar_transacao(self, transacao):
        self._transacoes.append(
            {
                "tipo": transacao.__class__.__name__,
                "valor": transacao.valor,
                "data": datetime.now().strftime("%d-%m-%Y %H:%M:%S"),
            }
        )

class Transacao(ABC):
    @property
    @abstractproperty
    def valor(self):
        pass

    @abstractclassmethod
    def registrar(self, conta):
        pass

class Saque(Transacao):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor

    def registrar(self, conta):
        sucesso_transacao = conta.sacar(self.valor)

        if sucesso_transacao:
            conta.historico.adicionar_transacao(self)

class Deposito(Transacao):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor

    def registrar(self, conta):
        sucesso_transacao = conta.depositar(self.valor)

        if sucesso_transacao:
            conta.historico.adicionar_transacao(self)

class Conta(ABC):
    def __init__(self, numero, cliente):
        self._saldo = 0
        self._numero = numero
        self._agencia = "0001"
        self._cliente = cliente
        self._historico = Historico()

    @classmethod
    def nova_conta(cls, cliente, numero):
        return cls(numero, cliente)

    @property
    def saldo(self):
        return self._saldo

    @property
    def numero(self):
        return self._numero

    @property
    def agencia(self):
        return self._agencia

    @property
    def cliente(self):
        return self._cliente

    @property
    def historico(self):
        return self._historico

    def sacar(self, valor):
        saldo = self.saldo
        excedeu_saldo = valor > saldo

        if excedeu_saldo:
            print("\n@@@ Operação falhou! Você não tem saldo suficiente. @@@")
        elif valor > 0:
            self._saldo -= valor
            print("\n=== Saque realizado com sucesso! ===")
            return True
        else:
            print("\n@@@ Operação falhou! O valor informado é inválido. @@@")

        return False

    def depositar(self, valor):
        if valor > 0:
            self._saldo += valor
            print("\n=== Depósito realizado com sucesso! ===")
        else:
            print("\n@@@ Operação falhou! O valor informado é inválido. @@@")
            return False

        return True

class ContaCorrente(Conta):
    def __init__(self, numero, cliente, limite=500, limite_saques=3):
        super().__init__(numero, cliente)
        self.limite = limite
        self.limite_saques = limite_saques

    def sacar(self, valor):
        numero_saques = len(
            [transacao for transacao in self.historico.transacoes if transacao["tipo"] == Saque.__name__]
        )

        excedeu_limite = valor > self.limite
        excedeu_saques = numero_saques >= self.limite_saques

        if excedeu_limite:
            print("\n@@@ Operação falhou! O valor do saque excede o limite. @@@")
        elif excedeu_saques:
            print("\n@@@ Operação falhou! Número máximo de saques excedido. @@@")
        else:
            return super().sacar(valor)

        return False

    def __str__(self):
        return f"""\
            Agência:\t{self.agencia}
            C/C:\t\t{self.numero}
            Titular:\t{self.cliente.nome}
        """

# Menu e Funções

menu = """

[d] Depositar
[s] Sacar
[e] Extrato
[u] Cadastrar Usuário
[c] Cadastrar Conta Bancária
[q] Sair

=> """

usuarios = []
contas = []
numero_conta = 1

def encontrar_usuario(cpf):
    return next((usuario for usuario in usuarios if usuario.cpf == cpf), None)

def cadastrar_usuario(nome, data_nascimento, cpf, endereco):
    cpf = ''.join(filter(str.isdigit, cpf))  # Remove caracteres não numéricos do CPF
    if encontrar_usuario(cpf):
        print("Erro: CPF já cadastrado.")
        return
    usuario = PessoaFisica(nome, data_nascimento, cpf, endereco)
    usuarios.append(usuario)
    print(f"Usuário {nome} cadastrado com sucesso.")

def cadastrar_conta(cpf):
    global numero_conta
    usuario = encontrar_usuario(cpf)
    if usuario:
        conta = ContaCorrente.nova_conta(usuario, numero_conta)
        usuario.adicionar_conta(conta)
        contas.append(conta)
        print(f"Conta {numero_conta} cadastrada com sucesso para o usuário {usuario.nome}.")
        numero_conta += 1
    else:
        print("Erro: Usuário não encontrado.")


def depositar(cpf, numero_conta, valor):
    usuario = encontrar_usuario(cpf)
    if not usuario:
        print("Usuário não encontrado.")
        return

    conta = next((conta for conta in usuario.contas if conta.numero == numero_conta), None)
    if not conta:
        print("Conta não encontrada.")
        return

    deposito = Deposito(valor)
    usuario.realizar_transacao(conta, deposito)


def sacar(cpf, numero_conta, valor):
    usuario = encontrar_usuario(cpf)
    if not usuario:
        print("Usuário não encontrado.")
        return

    conta = next((conta for conta in usuario.contas if conta.numero == numero_conta), None)
    if not conta:
        print("Conta não encontrada.")
        return

    saque = Saque(valor)
    usuario.realizar_transacao(conta, saque)


def exibir_extrato(cpf, numero_conta):
    usuario = encontrar_usuario(cpf)
    if not usuario:
        print("Usuário não encontrado.")
        return

    conta = next((conta for conta in usuario.contas if conta.numero == numero_conta), None)
    if not conta:
        print("Conta não encontrada.")
        return

    print("EXTRATO".center(32, "="))
    for transacao in conta.historico.transacoes:
        print(f"{transacao['tipo']}:\tR$ {transacao['valor']:.2f}\t{transacao['data']}")
    print(f"\nSaldo:\tR$ {conta.saldo:.2f}")
    print("===============================")


while True:
    opcao = input(menu)
    
    if opcao == "d":
        cpf = input("Informe o CPF do usuário: ")
        numero_conta = int(input("Informe o número da conta: "))
        valor = float(input("Digite o valor do depósito: "))
        depositar(cpf, numero_conta, valor)
    
    elif opcao == "s":
        cpf = input("Informe o CPF do usuário: ")
        numero_conta = int(input("Informe o número da conta: "))
        valor = float(input("Informe o valor a ser sacado: "))
        sacar(cpf, numero_conta, valor)
    
    elif opcao == "e":
        cpf = input("Informe o CPF do usuário: ")
        numero_conta = int(input("Informe o número da conta: "))
        exibir_extrato(cpf, numero_conta)
    
    elif opcao == "u":
        nome = input("Nome: ")
        data_nascimento = input("Data de Nascimento (dd/mm/aaaa): ")
        cpf = input("CPF: ")
        endereco = input("Endereço (logradouro - número - bairro - cidade/estado): ")
        cadastrar_usuario(nome, data_nascimento, cpf, endereco)
    
    elif opcao == "c":
        cpf = input("Informe o CPF do usuário: ")
        cadastrar_conta(cpf)
    
    elif opcao == "q":
        break
    
    else:
        print("Operação inválida, por favor selecione novamente a operação desejada.")
